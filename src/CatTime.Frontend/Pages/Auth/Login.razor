@page "/login"

@layout EmptyLayout

@using CatTime.Frontend.Infrastructure.Service
@using CatTime.Frontend.Pages.Auth.Models
@using CatTime.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization


@inject NavigationManager NavigationManager;
@inject CustomAuthenticationStateProvider AuthStateProvider;
@inject ClientService ClientService;

<div class="login-container">
    <div class="login-card">
        <div class="image-container">
            <img src="images/logocat.jpeg" width="300px"/>
        </div>
        <EditForm Model="@Model" OnValidSubmit="DoLogin" class="form-container">
            <DataAnnotationsValidator />
            <div class="login-form-container">
                <div class="login-form-title">
                    <MudText Typo="Typo.h3">CatTime</MudText>
                </div>
                <div class="login-form-fields">
                    <MudTextField @bind-Value="Model.Email" Label="E-Mail Adresse" For="@(() => Model.Email)"/>
                    <MudTextField @bind-Value="Model.Password" Label="Passwort" For="@(() => Model.Password)" InputType="InputType.Password"/>
                </div>
                <div class="login-action">
                    <span>Noch keinen Account?<MudLink Href="/register" Typo="Typo.body2">Jetzt registrieren!</MudLink></span>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="submit-button">Anmelden</MudButton>
                </div>
            </div>
        </EditForm>
    </div>
    @if (string.IsNullOrWhiteSpace(_errorMessage) is false)
    {
        <MudAlert Severity="Severity.Error" Dense="true" Elevation="0" Class="error-alert my-2">
            <MudAlertTitle>Error</MudAlertTitle>
            <MudAlertContent>@_errorMessage</MudAlertContent>
        </MudAlert>
    }
</div>

@code {
    [SupplyParameterFromQuery(Name = "returnUrl")] private string? ReturnUrl { get; set; }
    [SupplyParameterFromForm] public  LoginModel? Model { get; set; }
    
    private string? _errorMessage;

    protected override void OnInitialized() => Model ??= new();

    public async Task DoLogin()
    {
        try
        {
            if (AreFormValuesValid() is false) return;
            
            var loginResult = await this.ClientService.Login(Model.Email, Model.Password);
            await AuthStateProvider.SetTokenAsync(loginResult);
            
            NavigationManager.NavigateTo(GetNavigationUrl());
        }
        catch (Exception e)
        {
            _errorMessage = "Login fehlgeschlagen!";
            Console.WriteLine($"{_errorMessage}, {e}");
        }
    }

    private bool AreFormValuesValid() =>
        string.IsNullOrWhiteSpace(Model?.Email) is false ||
        string.IsNullOrWhiteSpace(Model?.Password) is false;

    private string GetNavigationUrl() => string.IsNullOrWhiteSpace(ReturnUrl) ? "/dashboard" : ReturnUrl;
}
