@page "/login"

@layout EmptyLayout

@using CatTime.Frontend.Pages.Auth.Models
@using CatTime.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Localization


@inject NavigationManager NavigationManager;
@inject CustomAuthenticationStateProvider AuthStateProvider;

<div class="login-container">
    <div class="login-card">
        <div class="image-container">
            <img src="images/logocat.jpeg" width="300px"/>
        </div>
        <EditForm Model="@_model" OnValidSubmit="SignInUserAsync" class="form-container">
            <div class="login-form-container">
                <div class="login-form-title">
                    <MudText Typo="Typo.h3">CatTime</MudText>
                </div>
                <div class="login-form-fields">
                    <MudTextField @bind-Value="_model.Email" Label="E-Mail Adresse" For="@(() => _model.Email)"/>
                    <MudTextField @bind-Value="_model.Password" Label="Passwort" For="@(() => _model.Password)" InputType="InputType.Password"/>
                </div>
                <div class="login-action">
                    <span>Noch keinen Account?<MudLink Href="/register" Typo="Typo.body2">Jetzt registrieren!</MudLink></span>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="submit-button">Anmelden</MudButton>
                </div>    
            </div>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel _model = new RegisterModel();

    /// <summary>
    /// If a Return URL is given, we will navigate there after login.
    /// </summary>
    [SupplyParameterFromQuery(Name = "returnUrl")]
    private string? ReturnUrl { get; set; }

    /// <summary>
    /// The Model the Form is going to bind to.
    /// </summary>


    /// <summary>
    /// Error Message.
    /// </summary>
    private string? ErrorMessage;

    /// <summary>
    /// Signs in the User to the Service using Cookie Authentication.
    /// </summary>
    /// <returns></returns>
    public async Task SignInUserAsync()
    {
        ErrorMessage = null;

        try
        {

            var guid = new Guid().ToString();

            await AuthStateProvider.SetTokenAsync(guid);

            var navigationUrl = GetNavigationUrl();

            NavigationManager.NavigateTo(navigationUrl);
        }
        catch
        {
            ErrorMessage = "Login fehlgeschlagen";
        }
    }

    private string GetNavigationUrl()
    {
        if (string.IsNullOrWhiteSpace(ReturnUrl))
        {
            return "/dashboard";
        }

        return ReturnUrl;
    }
}
