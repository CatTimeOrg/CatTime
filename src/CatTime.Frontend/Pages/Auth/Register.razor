@page "/register"

@layout EmptyLayout

@using CatTime.Frontend.Pages.Auth.Models
@using Microsoft.AspNetCore.Components.Forms
@using CatTime.Frontend.Infrastructure.Service

@inject NavigationManager NavigationManager;
@inject ClientService ClientService;

<div class="register-container">
    <div class="register-card">
        <div class="image-container">
            <img src="images/logocat.jpeg" />
        </div>
        <EditForm Model="@Model" OnValidSubmit="OnSubmit" class="form-container">
            <DataAnnotationsValidator />
            <div class="register-form-container">
                <MudText Typo="Typo.h6">CatTime</MudText>
                <MudTextField @bind-Value="Model!.FirstName" Label="Vorname" For="@(() => Model!.FirstName)"/>
                <MudTextField @bind-Value="Model!.LastName" Label="Nachname" For="@(() => Model!.LastName)"/>
                <MudTextField @bind-Value="Model!.Email" Label="E-Mail Adresse" For="@(() => Model!.Email)"/>
                <MudTextField @bind-Value="Model!.Password" Label="Passwort" For="@(() => Model!.Password)" InputType="InputType.Password" HelperText="Wählen Sie ein sicheres Passwort"/>
                <MudTextField @bind-Value="Model!.ConfirmPassword" Label="Passwort wiederholen" For="@(() => Model!.ConfirmPassword)" InputType="InputType.Password" HelperText="Wiederholen Sie das Passwort"/>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="submit-button">Registrieren</MudButton>
            </div>
            
        </EditForm>
    </div>
    @if (string.IsNullOrWhiteSpace(_errorMessage) is false)
    {
        <MudAlert Severity="Severity.Error" Dense="true" Elevation="0" Class="error-alert my-2">
            <MudAlertTitle>Error</MudAlertTitle>
            <MudAlertContent>@_errorMessage</MudAlertContent>
        </MudAlert>
    }
</div>

@code {
    [SupplyParameterFromForm] public RegisterModel? Model { get; set; }
    
    private string? _errorMessage;
    
    protected override void OnInitialized() => Model ??= new();

    private async Task OnSubmit(EditContext context)
    {
        if (AreFormValuesValid() is false) return;

        try
        {
            await ClientService.Register(Model.FirstName, Model.LastName, Model.Email, Model.Password);
        
            NavigationManager.NavigateTo("/login");
            StateHasChanged();
        }
        catch (Exception e)
        {
            _errorMessage = "Fehler bei der Registrierung";
            Console.WriteLine($"{_errorMessage}, {e}");
        }
    }
    
    private bool AreFormValuesValid() => 
        string.IsNullOrWhiteSpace(Model?.FirstName) is false || 
        string.IsNullOrWhiteSpace(Model?.LastName) is false  || 
        string.IsNullOrWhiteSpace(Model?.Email) is false || 
        string.IsNullOrWhiteSpace(Model?.Password) is false ||
        Model?.Password?.Equals(Model?.ConfirmPassword) is false || 
        Model?.Password?.Equals(Model?.ConfirmPassword) is false;
    }
}
